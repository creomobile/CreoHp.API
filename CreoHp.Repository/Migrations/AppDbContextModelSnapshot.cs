// <auto-generated />
using System;
using CreoHp.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CreoHp.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CreoHp.Models.PhraseCollections.BadCollectionUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InUrl");

                    b.HasKey("Id");

                    b.ToTable("BadCollectionUrls");
                });

            modelBuilder.Entity("CreoHp.Models.PhraseCollections.PhraseCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanSearch");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ModifiedByUserId");

                    b.Property<string>("OriginalText")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true);

                    b.Property<Guid>("PhraseId");

                    b.Property<int>("SearchCount");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("OriginalText")
                        .IsUnique();

                    b.HasIndex("PhraseId")
                        .IsUnique();

                    b.ToTable("PhraseCollections");
                });

            modelBuilder.Entity("CreoHp.Models.Phrases.Phrase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ModifiedByUserId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(true);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("Text")
                        .IsUnique();

                    b.ToTable("Phrases");
                });

            modelBuilder.Entity("CreoHp.Models.Tags.PhraseTag", b =>
                {
                    b.Property<Guid>("PhraseId");

                    b.Property<Guid>("TagId");

                    b.HasKey("PhraseId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PhraseTags");
                });

            modelBuilder.Entity("CreoHp.Models.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid?>("ModifiedByUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<int>("Position");

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("Name", "Type")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab3a769a-e800-4e48-97b5-a577baf5ac86"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(2817),
                            IsDeleted = false,
                            Name = "Neutral",
                            Position = 0,
                            Type = 0,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(2817)
                        },
                        new
                        {
                            Id = new Guid("c1f30ee9-ec04-448c-a5cc-3fe22c64e52a"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4922),
                            IsDeleted = false,
                            Name = "Positive",
                            Position = 1,
                            Type = 0,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4922)
                        },
                        new
                        {
                            Id = new Guid("a21869d5-c093-48cb-9ce0-c80d2e08d5bd"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4947),
                            IsDeleted = false,
                            Name = "Negative",
                            Position = 2,
                            Type = 0,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4947)
                        },
                        new
                        {
                            Id = new Guid("cca290de-81f5-482d-b27c-c5aea33b0886"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4954),
                            IsDeleted = false,
                            Name = "Common",
                            Position = 0,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4954)
                        },
                        new
                        {
                            Id = new Guid("b472de0a-951a-4518-abbe-0528043e53a4"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4960),
                            IsDeleted = false,
                            Name = "Health",
                            Position = 1,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4960)
                        },
                        new
                        {
                            Id = new Guid("92fd3c2d-32e1-4e99-a17c-1e1814ae538e"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4965),
                            IsDeleted = false,
                            Name = "Family",
                            Position = 2,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4965)
                        },
                        new
                        {
                            Id = new Guid("ddac2fa4-964e-475f-b1ff-31fa9105fbd7"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4971),
                            IsDeleted = false,
                            Name = "Children",
                            Position = 3,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4971)
                        },
                        new
                        {
                            Id = new Guid("66956a46-cfa5-4c4f-af55-718d9d97d850"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4989),
                            IsDeleted = false,
                            Name = "Love",
                            Position = 4,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4989)
                        },
                        new
                        {
                            Id = new Guid("f07f9df2-fcb0-4027-bfc8-67438342458f"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4996),
                            IsDeleted = false,
                            Name = "Friendship",
                            Position = 5,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(4996)
                        },
                        new
                        {
                            Id = new Guid("32eb46b5-6d6f-4c41-8495-47ad37e4b28d"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5001),
                            IsDeleted = false,
                            Name = "Study",
                            Position = 6,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5001)
                        },
                        new
                        {
                            Id = new Guid("454fc2a6-7c0b-4a89-840c-d9378da0c77d"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5007),
                            IsDeleted = false,
                            Name = "Сareer",
                            Position = 7,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5007)
                        },
                        new
                        {
                            Id = new Guid("48f1d60c-b834-415e-bae1-4b2c867ea93d"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5012),
                            IsDeleted = false,
                            Name = "Money",
                            Position = 8,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5012)
                        },
                        new
                        {
                            Id = new Guid("82415242-c3b9-45b8-b854-92dcdb5e2cfb"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5017),
                            IsDeleted = false,
                            Name = "Creation",
                            Position = 9,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5017)
                        },
                        new
                        {
                            Id = new Guid("134e8818-a5c8-49ea-b279-29fca5ff6ce9"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5023),
                            IsDeleted = false,
                            Name = "Travels",
                            Position = 10,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5023)
                        },
                        new
                        {
                            Id = new Guid("5af6ac0b-d645-4a2a-9943-08599a63573e"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5028),
                            IsDeleted = false,
                            Name = "Intertainment",
                            Position = 11,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5028)
                        },
                        new
                        {
                            Id = new Guid("7ec86883-c05d-4e55-92bb-58e7931d92af"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5036),
                            IsDeleted = false,
                            Name = "Shopping",
                            Position = 12,
                            Type = 1,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5036)
                        },
                        new
                        {
                            Id = new Guid("778be6b6-9233-454b-9511-9afef5dd9b53"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5041),
                            IsDeleted = false,
                            Name = "Info",
                            Position = 0,
                            Type = 2,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5041)
                        },
                        new
                        {
                            Id = new Guid("0bdcfdbd-2b7e-480b-98e0-93c2fc61b458"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5047),
                            IsDeleted = false,
                            Name = "Tip",
                            Position = 1,
                            Type = 2,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5047)
                        },
                        new
                        {
                            Id = new Guid("b8d72746-f8be-40f6-b905-23d9e2d46741"),
                            CreatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5052),
                            IsDeleted = false,
                            Name = "Warning",
                            Position = 2,
                            Type = 2,
                            UpdatedAt = new DateTime(2020, 8, 23, 18, 25, 57, 604, DateTimeKind.Utc).AddTicks(5052)
                        });
                });

            modelBuilder.Entity("CreoHp.Models.Tags.TagRelation", b =>
                {
                    b.Property<Guid>("ChildTagId");

                    b.Property<Guid>("ParentTagId");

                    b.HasKey("ChildTagId", "ParentTagId");

                    b.HasIndex("ParentTagId");

                    b.ToTable("TagRelations");
                });

            modelBuilder.Entity("CreoHp.Models.Users.AppIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CreoHp.Models.Users.AppIdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<int?>("Gender");

                    b.Property<bool>("IsBlocked");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CreoHp.Models.Users.AppIdentityUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CreoHp.Models.PhraseCollections.PhraseCollection", b =>
                {
                    b.HasOne("CreoHp.Models.Users.AppIdentityUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CreoHp.Models.Phrases.Phrase", "Phrase")
                        .WithOne("Collection")
                        .HasForeignKey("CreoHp.Models.PhraseCollections.PhraseCollection", "PhraseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CreoHp.Models.Phrases.Phrase", b =>
                {
                    b.HasOne("CreoHp.Models.Users.AppIdentityUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CreoHp.Models.Tags.PhraseTag", b =>
                {
                    b.HasOne("CreoHp.Models.Phrases.Phrase", "Phrase")
                        .WithMany("Tags")
                        .HasForeignKey("PhraseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CreoHp.Models.Tags.Tag", "Tag")
                        .WithMany("Phrases")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CreoHp.Models.Tags.Tag", b =>
                {
                    b.HasOne("CreoHp.Models.Users.AppIdentityUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CreoHp.Models.Tags.TagRelation", b =>
                {
                    b.HasOne("CreoHp.Models.Tags.Tag", "Child")
                        .WithMany("Parents")
                        .HasForeignKey("ChildTagId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CreoHp.Models.Tags.Tag", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentTagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CreoHp.Models.Users.AppIdentityUserRole", b =>
                {
                    b.HasOne("CreoHp.Models.Users.AppIdentityRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CreoHp.Models.Users.AppIdentityUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CreoHp.Models.Users.AppIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CreoHp.Models.Users.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CreoHp.Models.Users.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CreoHp.Models.Users.AppIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
